// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - protoc             v3.6.1
// source: config/bye.proto

package bye_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ByeServiceClient is the client API for ByeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ByeServiceClient interface {
	SayBye(ctx context.Context, in *ByeRequest, opts ...grpc.CallOption) (*ByeReply, error)
}

type byeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewByeServiceClient(cc grpc.ClientConnInterface) ByeServiceClient {
	return &byeServiceClient{cc}
}

func (c *byeServiceClient) SayBye(ctx context.Context, in *ByeRequest, opts ...grpc.CallOption) (*ByeReply, error) {
	out := new(ByeReply)
	err := c.cc.Invoke(ctx, "/ByeService/SayBye", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ByeServiceServer is the server API for ByeService service.
// All implementations must embed UnimplementedByeServiceServer
// for forward compatibility
type ByeServiceServer interface {
	SayBye(context.Context, *ByeRequest) (*ByeReply, error)
	mustEmbedUnimplementedByeServiceServer()
}

// UnimplementedByeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedByeServiceServer struct {
}

func (UnimplementedByeServiceServer) SayBye(context.Context, *ByeRequest) (*ByeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayBye not implemented")
}
func (UnimplementedByeServiceServer) mustEmbedUnimplementedByeServiceServer() {}

// UnsafeByeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ByeServiceServer will
// result in compilation errors.
type UnsafeByeServiceServer interface {
	mustEmbedUnimplementedByeServiceServer()
}

func RegisterByeServiceServer(s grpc.ServiceRegistrar, srv ByeServiceServer) {
	s.RegisterService(&ByeService_ServiceDesc, srv)
}

func _ByeService_SayBye_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ByeServiceServer).SayBye(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ByeService/SayBye",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ByeServiceServer).SayBye(ctx, req.(*ByeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ByeService_ServiceDesc is the grpc.ServiceDesc for ByeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ByeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ByeService",
	HandlerType: (*ByeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayBye",
			Handler:    _ByeService_SayBye_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "config/bye.proto",
}
